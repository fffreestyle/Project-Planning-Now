{"version":3,"sources":["pages/PomodoroTimer/index.tsx","pages/User/index.tsx","redux/store/dailyRecord/actions.ts","pages/DailyRecord/modifyRecordDetailModal.tsx","pages/DailyRecord/editDailyRecordDetail.tsx","pages/DailyRecord/deleteDailyRecordDetail.tsx","pages/DailyRecord/dailyRecordDetail.tsx","pages/DailyRecord/addDailyRecordDetail.tsx","pages/DailyRecord/dailyRecord.tsx","pages/DailyRecord/weeklyRecord.tsx","pages/DailyRecord/index.tsx","hooks/useTimer.ts","redux/store/projectScheduler/actions.ts","pages/ProjectScheduler/deleteProject.tsx","pages/ProjectScheduler/projectList.tsx","pages/ProjectScheduler/index.tsx","pages/ProjectScheduler/modifyProjectInfo.tsx","pages/ProjectScheduler/addProject.tsx","pages/ProjectScheduler/editProject.tsx","App.tsx","serviceWorker.ts","redux/store/dailyRecord/reducers.ts","redux/store/projectScheduler/reducers.ts","redux/store/index.ts","redux/rootStore.ts","index.tsx"],"names":["Stage","UserPage","props","user","name","addRecordDetail","createAction","deleteRecordDetail","editRecordDetail","getRecords","ModifyRecordDetailModal","modalTitle","recordUUID","visible","initialValues","onOk","handleCancel","TextArea","Input","RangePicker","TimePicker","Form","useForm","form","title","validateFields","then","values","console","log","recordTitle","description","recordDescription","taikingTime","startTime","endTime","record","recordDetailUUID","undefined","projectUUID","createTime","Date","resetFields","onCancel","layout","Item","label","rules","required","picker","format","EditDailyRecordDetail","useState","setVisible","dispatch","useDispatch","className","onClick","EditOutlined","editDetail","DeleteDailyRecordDetail","placement","onConfirm","okText","cancelText","DeleteOutlined","DailyRecordDetail","recordItem","size","extra","actions","moment","AddDailyRecordDetail","PlusOutlined","addDetail","DailyRecord","workingRecord","recordItems","date","sort","prev","next","valueOf","map","item","key","WeeklyRecord","records","useSelector","state","dailyRecord","dailyRecords","startDate","startOf","toDate","endDate","endOf","dateRange","setDateRange","useEffect","subtract","LeftCircleOutlined","add","RightCircleOutlined","index","DailyRecordPage","useTimer","params","initialValue","now","setNow","setStartTime","count","setCount","initialCount","setInitialCount","timerRef","useRef","time","diff","window","current","clearInterval","clearTimer","startTimer","setInterval","pauseTimer","resetTimer","setTimer","milliseconds","PomodoroTimer","workingInterval","restInterval","workflow","init","workingTime","wait","restingTime","currentStage","setCurrentStage","position","top","right","bottom","left","transform","secondHandAnimationState","setSecondHandAnimationState","totalSecond","setTotalSecond","second","Math","floor","nextStage","length","n","Notification","onshow","setTimeout","close","showNotification","start","fields","catch","reason","Group","gutter","offset","noStyle","type","icon","CaretRightFilled","permission","requestPermission","alert","disabled","UndoOutlined","style","addProject","deleteProject","editProject","DeleteProject","connector","connect","projectList","projectScheduler","useRouteMatch","url","path","header","to","bordered","dataSource","renderItem","InfoCircleOutlined","Meta","ProjectScheduler","SubTask","id","DatePicker","List","remove","width","field","validateTrigger","whitespace","message","placeholder","MinusCircleOutlined","margin","Task","ModifyProjectInfo","saveSetting","projectName","totalDateRange","closeDate","task","setting","members","x","subTask","subtask","y","AddProject","history","useHistory","push","EditProject","useParams","projectInfo","find","App","currentPage","setCurrentPage","href","e","selectedKeys","mode","exact","render","User","Boolean","location","hostname","match","dailyRecordReducer","createReducer","builder","addCase","action","dayDurantion","payload","weekDay","range","day","uuidv4","beAddRecord","addingRecordItem","clone","beEditRecord","beEditRecordDetailIndex","findIndex","splice","beDeleteRecordDetailIndex","projectSchedulerReducer","beAddedProject","beEditedProjectIndex","filter","project","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.1a1acb8c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Input, Row, Col, InputNumber } from 'antd';\r\nimport useTimer from '../../hooks/useTimer';\r\nimport { CaretRightFilled, SearchOutlined, UndoOutlined } from '@ant-design/icons';\r\n\r\nenum Stage {\r\n    init,\r\n    workingTime,\r\n    restingTime,\r\n    wait\r\n}\r\n\r\nconst PomodoroTimer = () => {\r\n    const [form] = Form.useForm();\r\n    const initialValues = {\r\n        workingInterval: 0.1,\r\n        restInterval: 0.1\r\n    }\r\n    const workflow = [Stage.init, Stage.workingTime, Stage.wait, Stage.restingTime];\r\n    const [currentStage, setCurrentStage] = useState(0);\r\n    const { time,\r\n        startTimer,\r\n        setTimer,\r\n        pauseTimer,\r\n        resetTimer, } = useTimer({ initialValue: initialValues.workingInterval * 60 * 1000 });\r\n    const [secondHandAnimationState, setSecondHandAnimationState] = useState<any>({\r\n        position: 'absolute',\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        transform: ''\r\n    });\r\n    const [totalSecond, setTotalSecond] = useState(0);\r\n    const second = Math.floor(time / 1000);\r\n    const nextStage = (currentStage: number) => {\r\n        setCurrentStage(Math.floor((currentStage + 1) % workflow.length));\r\n    }\r\n    const showNotification = (currentStage: number) => {\r\n        if (workflow[currentStage] === Stage.workingTime) {\r\n            let n = new Notification('Resting Time! 請按開始休息按鈕');\r\n            n.onshow = () => setTimeout(() => n.close(), 3000);\r\n        }\r\n        if (workflow[currentStage] === Stage.restingTime) {\r\n            let n = new Notification('Working Time! 請按開始工作按鈕');\r\n            n.onshow = () => setTimeout(() => n.close(), 3000);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setSecondHandAnimationState((state: any) => ({\r\n            ...state,\r\n            transform: `rotateZ(${(360 / totalSecond) * (totalSecond - second)}deg)`\r\n        }));\r\n        if (second === 0) {\r\n            showNotification(currentStage);\r\n            nextStage(currentStage);\r\n        }\r\n    }, [second])\r\n    const start = () => {\r\n        form\r\n            .validateFields()\r\n            .then(fields => {\r\n                if (workflow[currentStage] === Stage.init) {\r\n                    setTimer(fields.workingInterval * 60 * 1000);\r\n                    setTotalSecond(fields.workingInterval * 60);\r\n                    startTimer();\r\n                    nextStage(currentStage);\r\n                }\r\n                if (workflow[currentStage] === Stage.wait) {\r\n                    setTimer(fields.restInterval * 60 * 1000);\r\n                    setTotalSecond(fields.restInterval * 60);\r\n                    startTimer();\r\n                    nextStage(currentStage);\r\n                }\r\n            })\r\n            .catch(reason => {\r\n                console.log(reason);\r\n            });\r\n    }\r\n    const onStartTimer = () => {\r\n        if (Notification && Notification.permission !== \"granted\") {\r\n            Notification.requestPermission()\r\n                .then((permission) => {\r\n                    if (permission !== 'granted') {\r\n                        alert('請同意網頁通知番茄鐘提醒');\r\n                        return;\r\n                    }\r\n                    start();\r\n                });\r\n            return;\r\n        }\r\n        start();\r\n    }\r\n    const onResetTimer = () => {\r\n        form\r\n            .validateFields()\r\n            .then(fields => {\r\n                setCurrentStage(0);\r\n                setTimer(fields.workingInterval * 60 * 1000);\r\n                setTotalSecond(fields.workingInterval * 60);\r\n                setSecondHandAnimationState((state: any) => ({\r\n                    ...state,\r\n                    transform: 'rotateZ(360deg)'\r\n                }));\r\n                resetTimer();\r\n            })\r\n            .catch(reason => {\r\n                console.log(reason);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className='mx-auto container'>\r\n            <div className='mx-auto'>\r\n                <Form form={form} initialValues={initialValues}>\r\n                    <Input.Group>\r\n                        <Row gutter={[16, 16]}>\r\n                            <Col offset={9}>\r\n                                工作\r\n                        </Col>\r\n                            <Col>\r\n                                <Form.Item noStyle name='workingInterval' rules={[{ required: true }]}>\r\n                                    <Input type='number' />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col>\r\n                                分鐘\r\n                        </Col>\r\n                        </Row>\r\n                        <Row gutter={[16, 16]}>\r\n                            <Col offset={9}>\r\n                                休息\r\n                        </Col>\r\n                            <Col>\r\n                                <Form.Item noStyle name='restInterval' rules={[{ required: true }]}>\r\n                                    <Input type='number' />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col>\r\n                                分鐘\r\n                        </Col>\r\n                        </Row>\r\n                    </Input.Group>\r\n                </Form>\r\n                <Row gutter={[16, 16]}>\r\n                    <Col offset={9}>\r\n                        <Button icon={<CaretRightFilled />} onClick={onStartTimer} disabled={(workflow[currentStage] === Stage.workingTime || workflow[currentStage] === Stage.restingTime)}>\r\n                            {(workflow[currentStage] === Stage.wait || workflow[currentStage] === Stage.workingTime ? '開始休息' : '開始工作')}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button icon={<UndoOutlined />} onClick={onResetTimer}>Reset</Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            <article className=\"rounded-full border-black border-2 h-64 w-64 relative mx-auto clock\">\r\n                <div style={secondHandAnimationState}>\r\n                    <div className=\"seconds\"></div>\r\n                </div>\r\n            </article>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default PomodoroTimer;","import React from 'react'\r\n\r\ntype User = {\r\n  name: string\r\n}\r\n\r\ninterface IUserInfo {\r\n  user: User\r\n}\r\n\r\nconst UserPage = (props: IUserInfo) => {\r\n  const { user } = props\r\n\r\n  return <div>{user.name}</div>\r\n}\r\n\r\nexport default UserPage\r\n","// import {\r\n//     IDailyRecordDetail, ADD_DAILY_RECORD_DETAIL, EDIT_DAILY_RECORD_DETAIL, DELETE_DAILY_RECORD_DETAIL, DailyRecordActionTypes, IDailyRecord, SET_DAILY_RECORD, IDeleteRecordPayload\r\n// } from './types'\r\nimport { IDailyRecordDetail, IDeleteRecordPayload, IGetRecords } from './types';\r\nimport { createAction } from '@reduxjs/toolkit'\r\n\r\n\r\nexport const addRecordDetail = createAction<IDailyRecordDetail>('ADD_DAILY_RECORD_DETAIL');\r\nexport const deleteRecordDetail = createAction<IDeleteRecordPayload>('DELETE_DAILY_RECORD_DETAIL');\r\nexport const editRecordDetail = createAction<IDailyRecordDetail>('EDIT_DAILY_RECORD_DETAIL'); \r\nexport const getRecords = createAction<IGetRecords>('GET_RECORDS');\r\n \r\n// export function AddRecordDetail(newRecord: IDailyRecordDetail): DailyRecordActionTypes {\r\n//     console.log(newRecord);\r\n//     return {\r\n//         type: ADD_DAILY_RECORD_DETAIL,\r\n//         payload: newRecord\r\n//     }\r\n// }\r\n// export function DeleteRecordDetail(recordUUID: string, recordDetailUUID: string): DailyRecordActionTypes {\r\n//     return {\r\n//         type: DELETE_DAILY_RECORD_DETAIL,\r\n//         payload: {\r\n//             recordUUID,\r\n//             recordDetailUUID\r\n//         }\r\n//     }\r\n// }\r\n// export function EditRecordDetail(editRecord: IDailyRecordDetail): DailyRecordActionTypes {\r\n//     return {\r\n//         type: EDIT_DAILY_RECORD_DETAIL,\r\n//         payload: editRecord\r\n//     }\r\n// }\r\n// export function SetDailyRecords(dailyRecords: IDailyRecord[]): DailyRecordActionTypes {\r\n//     return {\r\n//         type: SET_DAILY_RECORD,\r\n//         payload: dailyRecords\r\n//     }\r\n// }","import React from 'react';\r\nimport { Modal, Input, TimePicker, Form } from 'antd'\r\nimport { IDailyRecordDetail } from '../../redux/store/dailyRecord/types';\r\nexport type IinitialValues = {\r\n    recordDetailUUID: string,\r\n    recordTitle: string,\r\n    recordDescription: string,\r\n    taikingTime: [Date, Date]\r\n}\r\ninterface IRecordDetailModal {\r\n    modalTitle: string,\r\n    recordUUID: string,\r\n    visible: boolean,\r\n    initialValues?: IinitialValues,\r\n    onOk: (record: IDailyRecordDetail) => void,\r\n    handleCancel: () => void\r\n}\r\nconst ModifyRecordDetailModal = ({ modalTitle, recordUUID, visible, initialValues, onOk, handleCancel }: IRecordDetailModal) => {\r\n    const { TextArea } = Input;\r\n    const { RangePicker } = TimePicker;\r\n    const [form] = Form.useForm();\r\n    const format = 'HH:mm';\r\n    return (\r\n        <Modal\r\n            title={modalTitle}\r\n            visible={visible}\r\n            onOk={() => {\r\n                form\r\n                    .validateFields()\r\n                    .then(values => {\r\n                        console.log(values);\r\n                        const title = values.recordTitle;\r\n                        const description = values.recordDescription;\r\n                        const [startTime, endTime] = values.taikingTime;\r\n                        const record: IDailyRecordDetail = {\r\n                            recordUUID: recordUUID,\r\n                            recordDetailUUID: initialValues !== undefined ? initialValues.recordDetailUUID : '',\r\n                            projectUUID: null,\r\n                            title: title,\r\n                            description: description,\r\n                            startTime: startTime,\r\n                            endTime: endTime,\r\n                            createTime: new Date(),\r\n                        }\r\n                        onOk(record);\r\n                        form.resetFields();\r\n                    })\r\n\r\n            }}\r\n            onCancel={handleCancel}\r\n        >\r\n            <Form form={form} layout='vertical' initialValues={initialValues}>\r\n                <Form.Item name='recordTitle' label='Record Title' rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name='recordDescription' label='Record Description' rules={[{ required: true }]}>\r\n                    <TextArea ></TextArea>\r\n                </Form.Item>\r\n                <Form.Item name='taikingTime' label='Taking Time' rules={[{ required: true }]}>\r\n                    <RangePicker picker='time' format={format} />\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n    )\r\n}\r\nexport default ModifyRecordDetailModal;","import React, { useState } from 'react';\r\nimport { editRecordDetail as editDetail } from '../../redux/store/dailyRecord/actions'\r\nimport { useDispatch } from 'react-redux';\r\nimport { EditOutlined } from '@ant-design/icons';\r\nimport ModifyRecordDetailModal, { IinitialValues } from './modifyRecordDetailModal';\r\nimport { IDailyRecordDetail } from '../../redux/store/dailyRecord/types';\r\n\r\ntype PropsFromParent = {\r\n    record: IDailyRecordDetail\r\n};\r\ntype Props = PropsFromParent\r\n\r\nconst EditDailyRecordDetail = (props: Props) => {\r\n    const [visible, setVisible] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const openModal = () => setVisible(true);\r\n    const initialValues: IinitialValues = {\r\n        recordDetailUUID: props.record.recordDetailUUID,\r\n        recordTitle: props.record.title,\r\n        recordDescription: props.record.description,\r\n        taikingTime: [props.record.startTime, props.record.endTime]\r\n    }\r\n    return (\r\n        <div className='mr-1'>\r\n            <a onClick={openModal}><EditOutlined /></a>\r\n            <ModifyRecordDetailModal\r\n                modalTitle='Edit Record'\r\n                recordUUID={props.record.recordUUID}\r\n                initialValues={initialValues}\r\n                visible={visible}\r\n                onOk={(values) => {\r\n                    dispatch(editDetail(values));\r\n                    setVisible(false);\r\n                }}\r\n                handleCancel={() => setVisible(false)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditDailyRecordDetail;","import React from 'react';\r\nimport { Button, Popconfirm } from 'antd';\r\nimport { deleteRecordDetail } from '../../redux/store/dailyRecord/actions'\r\nimport { connect, ConnectedProps, useDispatch } from 'react-redux';\r\nimport { IDailyRecordDetail } from '../../redux/store/dailyRecord/types';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\n\r\ntype PropsFromParent = {\r\n    record: IDailyRecordDetail\r\n}\r\ntype Props = PropsFromParent\r\n\r\nconst DeleteDailyRecordDetail = (props: Props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteRecord = () => {\r\n        dispatch(\r\n            deleteRecordDetail({\r\n                recordUUID: props.record.recordUUID,\r\n                recordDetailUUID: props.record.recordDetailUUID\r\n            })\r\n        );\r\n    };\r\n    return (\r\n        <div>\r\n            <Popconfirm placement='right' title='確認刪除嗎?' onConfirm={deleteRecord} okText=\"Yes\" cancelText=\"No\">\r\n                <a><DeleteOutlined /></a>\r\n            </Popconfirm>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeleteDailyRecordDetail;","import React from \"react\";\r\nimport { IDailyRecordDetail } from \"../../redux/store/dailyRecord/types\";\r\nimport EditDailyRecordDetail from './editDailyRecordDetail'\r\nimport DeleteDailyRecordDetail from './deleteDailyRecordDetail'\r\nimport { Row, Col, Card } from \"antd\";\r\nimport moment from \"moment\";\r\n\r\ninterface IRecordItem {\r\n    recordItem: IDailyRecordDetail,\r\n}\r\n\r\nconst DailyRecordDetail = (props: IRecordItem) => {\r\n    const { recordItem } = props;\r\n    const format = 'HH:mm';\r\n    return (\r\n        <div>\r\n            <Card\r\n                size=\"small\"\r\n                title={recordItem.title}\r\n                extra={\r\n                    <div className='flex'>\r\n                        <EditDailyRecordDetail record={recordItem}></EditDailyRecordDetail>\r\n                        <DeleteDailyRecordDetail record={recordItem}></DeleteDailyRecordDetail>\r\n                    </div>\r\n                }\r\n                actions={[<div>{moment(recordItem.startTime).format(format)} - {moment(recordItem.endTime).format(format)}</div>]}\r\n            >\r\n                {recordItem.description}\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DailyRecordDetail;","import React, { useState } from 'react';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport ModifyRecordDetailModal from './modifyRecordDetailModal';\r\nimport { useDispatch } from 'react-redux'\r\nimport { addRecordDetail as addDetail } from '../../redux/store/dailyRecord/actions'\r\n\r\ntype PropsFromParent = {\r\n    recordUUID: string\r\n};\r\ntype Props = PropsFromParent\r\n\r\nconst AddDailyRecordDetail = (props: Props) => {\r\n    const [visible, setVisible] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const openModal = () => setVisible(true);\r\n\r\n    return (\r\n        <div className='flex'>\r\n            <a className=' text-lg' onClick={openModal}><PlusOutlined /></a>\r\n            <ModifyRecordDetailModal\r\n                modalTitle='New Record'\r\n                recordUUID={props.recordUUID}\r\n                visible={visible}\r\n                onOk={(values) => {\r\n                    dispatch(addDetail(values));\r\n                    setVisible(false);\r\n                }}\r\n                handleCancel={() => setVisible(false)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddDailyRecordDetail;","import React, { useState } from 'react'\r\nimport DailyRecordDetail from './dailyRecordDetail';\r\nimport moment from 'moment';\r\nimport { sort } from 'ramda';\r\nimport AddDailyRecordDetail from './addDailyRecordDetail'\r\nimport { IDailyRecord, IDailyRecordDetail } from '../../redux/store/dailyRecord/types';\r\n\r\ninterface IWorkingRecord {\r\n    workingRecord: IDailyRecord\r\n}\r\nconst DailyRecord = (props: IWorkingRecord) => {\r\n    const record = props.workingRecord;\r\n    const timeDiff = (prev: IDailyRecordDetail, next: IDailyRecordDetail) => prev.startTime.valueOf() - next.startTime.valueOf();\r\n    const { recordItems } = props.workingRecord;\r\n    return (\r\n        <div className='border flex-1 m-1'>\r\n            <div className='flex text-center border-b'>\r\n                <div className=' flex-grow flex-shrink'>\r\n                    {moment(record.date).format('MM/DD(ddd)')}\r\n                </div>\r\n                <div className='flex-shrink-0 flex-grow-0'>\r\n                    <AddDailyRecordDetail recordUUID={props.workingRecord.recordUUID} ></AddDailyRecordDetail>\r\n                </div>\r\n            </div>\r\n\r\n            {sort(timeDiff, recordItems).map((item) => <DailyRecordDetail key={item.recordDetailUUID} recordItem={item} ></DailyRecordDetail>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DailyRecord;","import React, { useState, useEffect } from 'react'\r\nimport DailyRecord from './dailyRecord';\r\nimport { RootState } from '../../redux/store';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { LeftCircleOutlined, RightCircleOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport { getRecords } from '../../redux/store/dailyRecord/actions'\r\n\r\nconst WeeklyRecord = () => {\r\n    const records = useSelector((state: RootState) => state.dailyRecord.dailyRecords);\r\n    const dispatch = useDispatch();\r\n    const [dateRange, setDateRange] = useState({\r\n        startDate: moment().startOf('week').toDate(),\r\n        endDate: moment().endOf('week').toDate()\r\n    })\r\n    useEffect(() => {\r\n        dispatch(getRecords(dateRange));\r\n    }, [dateRange]);\r\n    const goPrevWeek = () => {\r\n        setDateRange({\r\n            startDate: moment(dateRange.startDate).subtract(7, 'd').toDate(),\r\n            endDate: moment(dateRange.endDate).subtract(7, 'd').toDate()\r\n        });\r\n    }\r\n    const goNextWeek = () => {\r\n        setDateRange({\r\n            startDate: moment(dateRange.startDate).add(7, 'd').toDate(),\r\n            endDate: moment(dateRange.endDate).add(7, 'd').toDate()\r\n        });\r\n    }\r\n    return (\r\n        <div>\r\n            <div className='flex container mx-auto'>\r\n                <div><a onClick={goPrevWeek}><LeftCircleOutlined className='text-4xl' /></a></div>\r\n                <div className='flex-1 text-center text-4xl'>{moment(dateRange.startDate).format('MM/DD')} - {moment(dateRange.endDate).format('MM/DD')}</div>\r\n                <div><a onClick={goNextWeek}><RightCircleOutlined className='text-4xl' /></a></div>\r\n            </div>\r\n            <div className='flex container mx-auto'>\r\n                {\r\n                    records.map((record, index) => {\r\n                        return (\r\n                            <DailyRecord key={record.recordUUID} workingRecord={record}></DailyRecord>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeeklyRecord;","import React from 'react'\r\nimport WeeklyRecord from './weeklyRecord'\r\n\r\nconst DailyRecordPage = () => {\r\n    return (\r\n        <div>\r\n            <WeeklyRecord></WeeklyRecord>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DailyRecordPage;","import { useState, useEffect, useRef } from \"react\"\r\nimport moment from 'moment'\r\n\r\ninterface Params {\r\n  initialValue?: number\r\n}\r\nconst useTimer = (params: Params) => {\r\n  const { initialValue } = params\r\n  const [now, setNow] = useState<Date>()\r\n  const [startTime, setStartTime] = useState<Date>()\r\n  const [count, setCount] = useState(10000)\r\n  const [initialCount, setInitialCount] = useState<number | undefined>(initialValue)\r\n  const timerRef = useRef<number>()\r\n  const time = (count - moment(now).diff(moment(startTime), 'milliseconds')) < 0 ? 0 : (count - moment(now).diff(moment(startTime), 'milliseconds'));\r\n\r\n  useEffect(() => {\r\n    if (window && timerRef.current && time < 10) {\r\n      window.clearInterval(timerRef.current)\r\n      timerRef.current = undefined\r\n    }\r\n  }, [time])\r\n\r\n  useEffect(() => {\r\n    if (initialCount && !timerRef.current) {\r\n      setCount(initialCount)\r\n    }\r\n  }, [initialCount])\r\n\r\n  const clearTimer = () => {\r\n    setNow(undefined)\r\n    setStartTime(undefined)\r\n    if (window && timerRef.current) {\r\n      window.clearInterval(timerRef.current)\r\n      timerRef.current = undefined\r\n    }\r\n  }\r\n\r\n  const startTimer = () => {\r\n    if (window) {\r\n      setStartTime(new Date())\r\n      timerRef.current = window.setInterval(() => setNow(new Date()), 10)\r\n    }\r\n  }\r\n\r\n\r\n  const pauseTimer = () => {\r\n    clearTimer()\r\n    setCount(time)\r\n  }\r\n\r\n  const resetTimer = () => {\r\n    clearTimer()\r\n    setCount(initialCount ?? 10000)\r\n  }\r\n\r\n  const setTimer = (milliseconds: number) => {\r\n    setInitialCount(milliseconds)\r\n  }\r\n\r\n  return {\r\n    startTimer,\r\n    pauseTimer,\r\n    resetTimer,\r\n    setTimer,\r\n    time\r\n  }\r\n}\r\n\r\nexport default useTimer","import { createAction } from '@reduxjs/toolkit'\r\nimport { IProjectInfo, IDeleteIProjectInfo } from './types';\r\n\r\nexport const addProject = createAction<IProjectInfo>('ADD_PROJECT');\r\nexport const deleteProject = createAction<IDeleteIProjectInfo>('DELETE_PROJECT');\r\nexport const editProject = createAction<IProjectInfo>('EDIT_PROJECT'); ","import React from 'react'\r\nimport { DeleteOutlined } from '@ant-design/icons'\r\nimport { deleteProject } from '../../redux/store/projectScheduler/actions';\r\nimport { connect, ConnectedProps, useDispatch } from 'react-redux';\r\n\r\ntype PropsFromParent = {\r\n    projectUUID: string\r\n};\r\ntype Props = PropsFromParent\r\nconst DeleteProject = (props: Props) => {\r\n    const dispatch = useDispatch();\r\n    const onClickDelete = () => dispatch(deleteProject({ projectUUID }));\r\n    const { projectUUID } = props;\r\n    return (\r\n        <a onClick={onClickDelete} className='text-xl'>\r\n            <DeleteOutlined />\r\n        </a>\r\n    )\r\n}\r\n\r\nexport default DeleteProject;\r\n","import React from 'react'\r\nimport { RootState } from '../../redux/store'\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { List } from 'antd';\r\nimport { EditOutlined, DeleteOutlined, PlusOutlined, InfoCircleOutlined } from '@ant-design/icons';\r\nimport { useRouteMatch, Link } from 'react-router-dom';\r\nimport DeleteProject from './deleteProject';\r\nconst mapState = (state: RootState) => {\r\n    return {\r\n        projectList: state.projectScheduler\r\n    }\r\n}\r\nconst connector = connect(mapState);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux\r\nconst ProjectList = (props: Props) => {\r\n    const projectList = props.projectList;\r\n\r\n    const { path, url } = useRouteMatch();\r\n    return (\r\n        <div className=\"container mx-auto\">\r\n            <List\r\n                header={\r\n                    <div className='flex'>\r\n                        <div className='flex-shrink flex-grow'>Project List</div>\r\n                        <div className='flex-grow-0 flex-shrink-0'>\r\n                            <Link to={`${url}/add`} className='text-xl'><PlusOutlined /></Link>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                bordered\r\n                dataSource={projectList}\r\n                renderItem={item => (\r\n                    <List.Item actions={[\r\n                        <InfoCircleOutlined />,\r\n                        <Link className='text-xl' to={`${url}/edit/${item.projectUUID}`} key=\"list-loadmore-edit\"><EditOutlined /></Link>,\r\n                        <DeleteProject projectUUID={item.projectUUID === null ? '' : item.projectUUID}></DeleteProject>\r\n                    ]}>\r\n                        <List.Item.Meta\r\n                            title={<div>{item.name}</div>}\r\n                            description={item.name}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connector(ProjectList);","import React from 'react'\r\nimport ModifyProjectInfo from './modifyProjectInfo';\r\nimport Calendar from './calendar';\r\nimport ProjectList from './projectList';\r\n\r\n\r\nconst ProjectScheduler = () => {\r\n\r\n    return (\r\n        <div className='flex'>\r\n            {/* <ModifyProjectInfo saveSetting={(projectInfo) => { }}></ModifyProjectInfo> */}\r\n            <ProjectList></ProjectList>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectScheduler;","import React from 'react'\r\nimport { Row, Col, Form, Input, DatePicker, Button } from 'antd'\r\nimport { PlusOutlined, MinusCircleOutlined } from '@ant-design/icons';\r\nimport { IProjectInfo } from '../../redux/store/projectScheduler/types';\r\n\r\nconst SubTask = ({ id }: { id: number }) => {\r\n    const { RangePicker } = DatePicker;\r\n    return (\r\n        <Form.List name={[id, 'subtask']}>\r\n            {(fields, { add, remove }) => {\r\n                return (\r\n                    <div>\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"dashed\"\r\n                                onClick={() => {\r\n                                    add();\r\n                                }}\r\n                                style={{ width: '60%' }}\r\n                            >\r\n                                <PlusOutlined /> Add SubTask\r\n                            </Button>\r\n                        </Form.Item>\r\n                        {fields.map((field, index) => (\r\n                            <div key={field.key} className='flex'>\r\n                                <Form.Item\r\n                                    name={[field.name, 'title']}\r\n                                    validateTrigger={['onChange', 'onBlur']}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            whitespace: true,\r\n                                            message: \"Please input Subtask title\",\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input placeholder=\"Subtask title\" />\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name={[field.name, 'member']}\r\n                                    validateTrigger={['onChange', 'onBlur']}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            whitespace: true,\r\n                                            message: \"Please input task member\",\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input placeholder=\"Task member\" />\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name={[field.name, 'dateRange']}\r\n                                >\r\n                                    <RangePicker picker='week' placeholder={[\"Task start week\", \"Task finish week\"]} />\r\n                                </Form.Item>\r\n                                <MinusCircleOutlined\r\n                                    className=\"dynamic-delete-button\"\r\n                                    style={{ margin: '0 8px' }}\r\n                                    onClick={() => {\r\n                                        remove(field.name);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )\r\n            }}\r\n        </Form.List>\r\n    )\r\n}\r\nconst Task = () => {\r\n    const { RangePicker } = DatePicker;\r\n    return (\r\n        <Form.List name=\"task\">\r\n            {(fields, { add, remove }) => {\r\n                return (\r\n                    <div>\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"dashed\"\r\n                                onClick={() => {\r\n                                    add();\r\n                                }}\r\n                                style={{ width: '60%' }}\r\n                            >\r\n                                <PlusOutlined /> Add Task\r\n                            </Button>\r\n                        </Form.Item>\r\n                        {fields.map((field, index) => (\r\n                            <div key={field.key}>\r\n                                <div className='flex'>\r\n                                    <Form.Item\r\n                                        name={[field.name, 'title']}\r\n                                        validateTrigger={['onChange', 'onBlur']}\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                whitespace: true,\r\n                                                message: \"Please input task title\",\r\n                                            },\r\n                                        ]}\r\n\r\n                                    >\r\n                                        <Input placeholder=\"Task title\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name={[field.name, 'description']}\r\n                                        validateTrigger={['onChange', 'onBlur']}\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                whitespace: true,\r\n                                                message: \"Please input task description\",\r\n                                            },\r\n                                        ]}\r\n                                    >\r\n                                        <Input placeholder=\"Task description\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name={[field.name, 'member']}\r\n                                        validateTrigger={['onChange', 'onBlur']}\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                whitespace: true,\r\n                                                message: \"Please input task member\",\r\n                                            },\r\n                                        ]}\r\n                                    >\r\n                                        <Input placeholder=\"Task member\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name={[field.name, 'dateRange']}\r\n                                    >\r\n                                        <RangePicker picker='week' placeholder={[\"Task start week\", \"Task finish week\"]} />\r\n                                    </Form.Item>\r\n                                    <MinusCircleOutlined\r\n                                        className=\"dynamic-delete-button\"\r\n                                        style={{ margin: '0 8px' }}\r\n                                        onClick={() => {\r\n                                            remove(field.name);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <SubTask id={field.name}></SubTask>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                );\r\n            }}\r\n        </Form.List>\r\n    )\r\n}\r\n\r\nconst ModifyProjectInfo = ({ saveSetting, initialValues }: { saveSetting: (projectSetting: IProjectInfo) => void, initialValues?: IProjectInfo }) => {\r\n    const { RangePicker } = DatePicker;\r\n    const [form] = Form.useForm();\r\n    console.log(initialValues);\r\n    const init = initialValues ? {\r\n        projectUUID: initialValues.projectUUID,\r\n        projectName: initialValues.name,\r\n        description: initialValues.description,\r\n        totalDateRange: [initialValues.startDate, initialValues.closeDate],\r\n        task: initialValues.task\r\n    } : undefined;\r\n    const saveProjectSettings = () => {\r\n        form\r\n            .validateFields()\r\n            .then(values => {\r\n                const setting: IProjectInfo = {\r\n                    projectUUID: initialValues ? initialValues.projectUUID : null,\r\n                    name: values.projectName,\r\n                    description: values.description,\r\n                    members: [],\r\n                    startDate: values.totalDateRange[0],\r\n                    closeDate: values.totalDateRange[1],\r\n                    task: values.task?.map((x: any) => ({\r\n                        title: x.title,\r\n                        description: x.description,\r\n                        members: [],\r\n                        startDate: x.dateRange[0],\r\n                        closeDate: x.dateRange[1],\r\n                        subTask: x.subtask?.map((y: any) => ({\r\n                            title: y.title,\r\n                            members: [],\r\n                            startDate: y.dateRange[0],\r\n                            closeDate: y.dateRange[1],\r\n                        }))\r\n                    })),\r\n                }\r\n                saveSetting(setting);\r\n            })\r\n            .catch(reason => {\r\n                console.log(reason);\r\n            })\r\n    }\r\n    return (\r\n        <div>\r\n            <Form form={form}\r\n                initialValues={init}>\r\n                <Form.Item name='projectName' label='Project Name'\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            whitespace: true,\r\n                            message: \"Please input project name\",\r\n                        },\r\n                    ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name='description' label='Description'>\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <Form.Item name='member' label='Member'\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            whitespace: true,\r\n                            message: \"Please input member\",\r\n                        },\r\n                    ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name='totalDateRange' label='Total Date Range'\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input project duration\",\r\n                        },\r\n                    ]}>\r\n                    <RangePicker picker='week' />\r\n                </Form.Item>\r\n                <Task></Task>\r\n                <Button onClick={saveProjectSettings}>Save</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModifyProjectInfo;","import React from 'react'\r\nimport ModifyProjectInfo from './modifyProjectInfo'\r\nimport { useDispatch } from 'react-redux';\r\nimport { addProject } from '../../redux/store/projectScheduler/actions';\r\nimport { IProjectInfo } from '../../redux/store/projectScheduler/types';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst AddProject = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const saveSetting = (setting: IProjectInfo) => {\r\n        dispatch(addProject(setting));\r\n        history.push('/ProjectScheduler')\r\n    }\r\n    return (\r\n        <div>\r\n            <div className='flex container mx-auto'>\r\n                <ModifyProjectInfo saveSetting={saveSetting}></ModifyProjectInfo>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddProject;","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { RootState } from '../../redux/store';\r\nimport { editProject } from '../../redux/store/projectScheduler/actions';\r\nimport { IProjectInfo } from '../../redux/store/projectScheduler/types';\r\nimport ModifyProjectInfo from './modifyProjectInfo';\r\ntype Param = {\r\n    projectUUID: string\r\n}\r\nconst EditProject = () => {\r\n    const { projectUUID } = useParams<Param>();\r\n    console.log(projectUUID);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const saveSetting = (setting: IProjectInfo) => {\r\n        dispatch(editProject(setting));\r\n        history.push('/ProjectScheduler')\r\n    }\r\n    const projectInfo = useSelector((state: RootState) => state.projectScheduler.find(x => x.projectUUID === projectUUID));\r\n    console.log(projectInfo);\r\n    return (\r\n        <div className='flex container mx-auto'>\r\n            <ModifyProjectInfo saveSetting={saveSetting} initialValues={projectInfo}></ModifyProjectInfo>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditProject;","import React, { useState } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom'\nimport logo from './logo.svg';\nimport UserPage from '../src/pages/User'\nimport './App.css';\nimport DailyRecordPage from './pages/DailyRecord';\nimport PomodoroTimer from './pages/PomodoroTimer';\nimport ProjectScheduler from './pages/ProjectScheduler';\nimport { Menu } from 'antd';\nimport AddProject from './pages/ProjectScheduler/addProject';\nimport EditProject from './pages/ProjectScheduler/editProject';\n\n\n\nfunction App() {\n  const user = {\n    name: 'GoHmoe'\n  }\n  const [currentPage, setCurrentPage] = useState('');\n  return (\n    <div>\n      <header className='text-xl max-w-full shadow'>\n        <div className='h-16 flex'>\n          <div className='flex items-center'>\n            <div className='ml-4 mr-4 pr-4 border-r-2'><a href='/'>Project Planing Now</a></div>\n            <Menu onClick={(e) => { setCurrentPage(e.key) }} selectedKeys={[currentPage]} mode=\"horizontal\">\n              <Menu.Item key=\"WorkingRecord\">\n                <Link className='' to='/WorkingRecord'>WorkingRecord</Link>\n              </Menu.Item>\n              <Menu.Item key=\"PomodoroTimer\">\n                <Link className='' to='/PomodoroTimer'>PomodoroTimer</Link>\n              </Menu.Item>\n              <Menu.Item key=\"ProjectScheduler\">\n                <Link className='' to='/ProjectScheduler'>ProjectScheduler</Link>\n              </Menu.Item>\n            </Menu>\n          </div>\n        </div>\n      </header>\n      <div className=' pt-10'>\n        <Switch>\n          <Route exact path='/user' render={() => <UserPage user={user}></UserPage>} />\n          <Route exact path='/WorkingRecord' render={() => <DailyRecordPage></DailyRecordPage>} />\n          <Route exact path='/PomodoroTimer' render={() => <PomodoroTimer></PomodoroTimer>} />\n          <Route exact path='/ProjectScheduler' render={() => <ProjectScheduler></ProjectScheduler>} />\n          <Route exact path='/ProjectScheduler/add' render={() => <AddProject></AddProject>}></Route>\n          <Route exact path='/ProjectScheduler/edit/:projectUUID' render={() => <EditProject></EditProject>}></Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import moment from \"moment\";\r\n// import {\r\n//     IDailyRecordState,\r\n//     DailyRecordActionTypes,\r\n//     SET_DAILY_RECORD,\r\n//     ADD_DAILY_RECORD_DETAIL,\r\n//     EDIT_DAILY_RECORD_DETAIL,\r\n//     DELETE_DAILY_RECORD_DETAIL,\r\n//     IDailyRecord\r\n// } from \"./types\";\r\nimport { IDailyRecord, IDailyRecordState } from \"./types\";\r\nimport { range, clone } from \"ramda\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addRecordDetail, editRecordDetail, deleteRecordDetail, getRecords } from \"./actions\";\r\n\r\nconst initialState: IDailyRecordState = {\r\n    dailyRecords: []\r\n}\r\n\r\nexport const dailyRecordReducer = createReducer(initialState, builder =>\r\n    builder\r\n        .addCase(getRecords, (state, action) => {\r\n            const dayDurantion = moment(action.payload.endDate).diff(action.payload.startDate, 'd') + 1;\r\n            const weekDay = range(0, dayDurantion).map((day) => moment(action.payload.startDate).day(day));\r\n            state.dailyRecords = weekDay.map((day): IDailyRecord => {\r\n                return {\r\n                    recordUUID: uuidv4(),\r\n                    date: day.toDate(),\r\n                    recordItems: []\r\n                }\r\n            })\r\n        })\r\n        .addCase(addRecordDetail, (state, action) => {\r\n            const beAddRecord = state\r\n                .dailyRecords\r\n                .find(dailyRecord => dailyRecord.recordUUID === action.payload.recordUUID);\r\n            if (beAddRecord !== undefined) {\r\n                const addingRecordItem = clone(action.payload);\r\n                addingRecordItem.recordDetailUUID = uuidv4();\r\n                beAddRecord.recordItems.push(addingRecordItem);\r\n            }\r\n\r\n            // const newDailyRecords = state.dailyRecords.map((dailyRecord) => {\r\n            //     if (dailyRecord.recordUUID === action.payload.recordUUID) {\r\n            //         return {\r\n            //             ...dailyRecord,\r\n            //             recordItems: dailyRecord.recordItems.concat(action.payload)\r\n            //         }\r\n            //     }\r\n            //     return dailyRecord;\r\n            // })\r\n            // return {\r\n            //     ...state,\r\n            //     dailyRecords: newDailyRecords\r\n            // }\r\n        })\r\n        .addCase(editRecordDetail, (state, action) => {\r\n            let beEditRecord = state\r\n                .dailyRecords\r\n                .find(dailyRecord => dailyRecord.recordUUID === action.payload.recordUUID);\r\n            if (beEditRecord !== undefined) {\r\n                const beEditRecordDetailIndex = beEditRecord.recordItems.findIndex(x => x.recordDetailUUID === action.payload.recordDetailUUID)\r\n                beEditRecord.recordItems.splice(beEditRecordDetailIndex, 1, action.payload);\r\n            }\r\n            // const newDailyRecords = state.dailyRecords.map((dailyRecord) => {\r\n            //     if (dailyRecord.recordUUID === action.payload.recordUUID) {\r\n            //         return {\r\n            //             ...dailyRecord,\r\n            //             recordItems: dailyRecord.recordItems\r\n            //                 .filter((item) => item.recordDetailUUID !== action.payload.recordDetailUUID)\r\n            //                 .concat(action.payload)\r\n            //         }\r\n            //     }\r\n            //     return dailyRecord;\r\n            // })\r\n            // return {\r\n            //     ...state,\r\n            //     dailyRecords: newDailyRecords\r\n            // }\r\n        })\r\n        .addCase(deleteRecordDetail, (state, action) => {\r\n\r\n            const beEditRecord = state\r\n                .dailyRecords\r\n                .find(dailyRecord => dailyRecord.recordUUID === action.payload.recordUUID);\r\n            if (beEditRecord !== undefined) {\r\n                const beDeleteRecordDetailIndex = beEditRecord.recordItems.findIndex(x => x.recordDetailUUID === action.payload.recordDetailUUID)\r\n                beEditRecord.recordItems.splice(beDeleteRecordDetailIndex, 1);\r\n            }\r\n\r\n\r\n            // const newDailyRecords = state.dailyRecords.map((dailyRecord) => {\r\n            //     if (dailyRecord.recordUUID === action.payload.recordUUID) {\r\n            //         return {\r\n            //             ...dailyRecord,\r\n            //             recordItems: dailyRecord.recordItems\r\n            //                 .filter((item) => item.recordDetailUUID !== action.payload.recordDetailUUID)\r\n            //         }\r\n            //     }\r\n            //     return dailyRecord;\r\n            // })\r\n            // return {\r\n            //     ...state,\r\n            //     dailyRecords: newDailyRecords\r\n            // }\r\n        })\r\n)\r\n\r\n// export function dailyRecordReducer(state = initialState, action: DailyRecordActionTypes) {\r\n//     switch (action.type) {\r\n//         case SET_DAILY_RECORD: {\r\n//             return {\r\n//                 dailyRecords: action.payload\r\n//             };\r\n//         }\r\n//         case ADD_DAILY_RECORD_DETAIL: {\r\n//             const newDailyRecords = state.dailyRecords.map((dailyRecord) => {\r\n//                 if (dailyRecord.recordUUID === action.payload.recordUUID) {\r\n//                     return {\r\n//                         ...dailyRecord,\r\n//                         recordItems: dailyRecord.recordItems.concat(action.payload)\r\n//                     }\r\n//                 }\r\n//                 return dailyRecord;\r\n//             })\r\n//             return {\r\n//                 ...state,\r\n//                 dailyRecords: newDailyRecords\r\n//             }\r\n//         }\r\n//         case EDIT_DAILY_RECORD_DETAIL: {\r\n//             const newDailyRecords = state.dailyRecords.map((dailyRecord) => {\r\n//                 if (dailyRecord.recordUUID === action.payload.recordUUID) {\r\n//                     return {\r\n//                         ...dailyRecord,\r\n//                         recordItems: dailyRecord.recordItems\r\n//                             .filter((item) => item.recordDetailUUID !== action.payload.recordDetailUUID)\r\n//                             .concat(action.payload)\r\n//                     }\r\n//                 }\r\n//                 return dailyRecord;\r\n//             })\r\n//             return {\r\n//                 ...state,\r\n//                 dailyRecords: newDailyRecords\r\n//             }\r\n//         }\r\n//         case DELETE_DAILY_RECORD_DETAIL: {\r\n//             const newDailyRecords = state.dailyRecords.map((dailyRecord) => {\r\n//                 if (dailyRecord.recordUUID === action.payload.recordUUID) {\r\n//                     return {\r\n//                         ...dailyRecord,\r\n//                         recordItems: dailyRecord.recordItems\r\n//                             .filter((item) => item.recordDetailUUID !== action.payload.recordDetailUUID)\r\n//                     }\r\n//                 }\r\n//                 return dailyRecord;\r\n//             })\r\n//             return {\r\n//                 ...state,\r\n//                 dailyRecords: newDailyRecords\r\n//             }\r\n//         }\r\n//         default: {\r\n//             return state;\r\n//         }\r\n//     }\r\n// }","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { IProjectInfo } from \"./types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { addProject, editProject, deleteProject } from \"./actions\";\r\nimport { clone } from 'ramda';\r\nconst initialState: IProjectInfo[] = [];\r\n\r\nexport const projectSchedulerReducer = createReducer(initialState, builder =>\r\n    builder\r\n        .addCase(addProject, (state, action) => {\r\n            const beAddedProject = clone(action.payload);\r\n            beAddedProject.projectUUID = uuidv4();\r\n            state.push(beAddedProject);\r\n        })\r\n        .addCase(editProject, (state, action) => {\r\n            const beEditedProjectIndex = state.findIndex(x => x.projectUUID === action.payload.projectUUID);\r\n            if (beEditedProjectIndex !== -1) {\r\n                state.splice(beEditedProjectIndex, 1, action.payload);\r\n            }\r\n        })\r\n        .addCase(deleteProject, (state, action) => {\r\n            return state.filter(project => {\r\n                return project.projectUUID !== action.payload.projectUUID\r\n            });\r\n        })\r\n)","import { combineReducers } from 'redux'\r\nimport { dailyRecordReducer } from './dailyRecord/reducers'\r\nimport { projectSchedulerReducer } from './projectScheduler/reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n    dailyRecord: dailyRecordReducer,\r\n    projectScheduler: projectSchedulerReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;","import { createStore } from 'redux'\r\nimport { configureStore } from '@reduxjs/toolkit'\r\nimport rootReducer from './store/index'\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer\r\n})\r\n\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport './assets/main.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/rootStore'\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}