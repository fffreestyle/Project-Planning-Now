{"version":3,"sources":["pages/User/index.tsx","redux/store/dailyRecord/actions.ts","pages/DailyRecord/modifyRecordDetailModal.tsx","pages/DailyRecord/editDailyRecordDetail.tsx","pages/DailyRecord/deleteDailyRecordDetail.tsx","pages/DailyRecord/dailyRecordDetail.tsx","pages/DailyRecord/addDailyRecordDetail.tsx","pages/DailyRecord/dailyRecord.tsx","pages/DailyRecord/weeklyRecord.tsx","pages/DailyRecord/index.tsx","pages/PomodoroTimer/index.tsx","redux/store/projectScheduler/actions.ts","pages/ProjectScheduler/deleteProject.tsx","pages/ProjectScheduler/projectList.tsx","pages/ProjectScheduler/index.tsx","pages/ProjectScheduler/modifyProjectInfo.tsx","pages/ProjectScheduler/addProject.tsx","pages/ProjectScheduler/editProject.tsx","App.tsx","serviceWorker.ts","redux/store/dailyRecord/reducers.ts","redux/store/projectScheduler/reducers.ts","redux/store/index.ts","redux/rootStore.ts","index.tsx"],"names":["UserPage","props","user","name","addRecordDetail","createAction","deleteRecordDetail","editRecordDetail","getRecords","ModifyRecordDetailModal","modalTitle","recordUUID","visible","initialValues","onOk","handleCancel","TextArea","Input","RangePicker","TimePicker","Form","useForm","form","title","validateFields","then","values","console","log","recordTitle","description","recordDescription","taikingTime","startTime","endTime","record","recordDetailUUID","undefined","projectUUID","createTime","Date","resetFields","onCancel","layout","Item","label","rules","required","picker","format","EditDailyRecordDetail","useState","setVisible","dispatch","useDispatch","className","onClick","EditOutlined","editDetail","DeleteDailyRecordDetail","placement","onConfirm","okText","cancelText","DeleteOutlined","DailyRecordDetail","recordItem","size","extra","actions","moment","AddDailyRecordDetail","PlusOutlined","addDetail","DailyRecord","workingRecord","recordItems","date","sort","prev","next","valueOf","map","item","key","WeeklyRecord","records","useSelector","state","dailyRecord","dailyRecords","startDate","startOf","toDate","endDate","endOf","dateRange","setDateRange","useEffect","subtract","LeftCircleOutlined","add","RightCircleOutlined","index","DailyRecordPage","PomodoroTimer","workingInterval","restInterval","isActive","setIsActive","isWorkingTime","setIsWorkingTime","isRestTime","setIsRestTime","workingSeconds","setWorkingSeconds","restSeconds","setRestSeconds","setWorkingInterval","setRestInterval","timer","window","setTimeout","Notification","seconds","clearTimeout","startTimer","fields","Group","noStyle","permission","requestPermission","alert","addProject","deleteProject","editProject","DeleteProject","connector","connect","projectList","projectScheduler","useRouteMatch","url","path","header","to","bordered","dataSource","renderItem","InfoCircleOutlined","Meta","ProjectScheduler","SubTask","id","DatePicker","List","remove","type","style","width","field","validateTrigger","whitespace","message","placeholder","Task","MinusCircleOutlined","margin","ModifyProjectInfo","saveSetting","setting","projectName","members","totalDateRange","closeDate","task","JSON","stringify","catch","reason","AddProject","EditProject","useParams","App","currentPage","setCurrentPage","href","e","selectedKeys","mode","exact","render","User","Boolean","location","hostname","match","dailyRecordReducer","createReducer","builder","addCase","action","dayDurantion","payload","diff","weekDay","range","day","uuidv4","beAddRecord","find","addingRecordItem","clone","push","beEditRecord","beEditRecordDetailIndex","findIndex","x","splice","beDeleteRecordDetailIndex","projectSchedulerReducer","beAddedProject","beEditedProjectIndex","filter","project","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.0ed6aec4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\ntype User = {\r\n  name: string\r\n}\r\n\r\ninterface IUserInfo {\r\n  user: User\r\n}\r\n\r\nconst UserPage = (props: IUserInfo) => {\r\n  const { user } = props\r\n\r\n  return <div>{user.name}</div>\r\n}\r\n\r\nexport default UserPage\r\n","// import {\r\n//     IDailyRecordDetail, ADD_DAILY_RECORD_DETAIL, EDIT_DAILY_RECORD_DETAIL, DELETE_DAILY_RECORD_DETAIL, DailyRecordActionTypes, IDailyRecord, SET_DAILY_RECORD, IDeleteRecordPayload\r\n// } from './types'\r\nimport { IDailyRecordDetail, IDeleteRecordPayload, IGetRecords } from './types';\r\nimport { createAction } from '@reduxjs/toolkit'\r\n\r\n\r\nexport const addRecordDetail = createAction<IDailyRecordDetail>('ADD_DAILY_RECORD_DETAIL');\r\nexport const deleteRecordDetail = createAction<IDeleteRecordPayload>('DELETE_DAILY_RECORD_DETAIL');\r\nexport const editRecordDetail = createAction<IDailyRecordDetail>('EDIT_DAILY_RECORD_DETAIL'); \r\nexport const getRecords = createAction<IGetRecords>('GET_RECORDS');\r\n \r\n// export function AddRecordDetail(newRecord: IDailyRecordDetail): DailyRecordActionTypes {\r\n//     console.log(newRecord);\r\n//     return {\r\n//         type: ADD_DAILY_RECORD_DETAIL,\r\n//         payload: newRecord\r\n//     }\r\n// }\r\n// export function DeleteRecordDetail(recordUUID: string, recordDetailUUID: string): DailyRecordActionTypes {\r\n//     return {\r\n//         type: DELETE_DAILY_RECORD_DETAIL,\r\n//         payload: {\r\n//             recordUUID,\r\n//             recordDetailUUID\r\n//         }\r\n//     }\r\n// }\r\n// export function EditRecordDetail(editRecord: IDailyRecordDetail): DailyRecordActionTypes {\r\n//     return {\r\n//         type: EDIT_DAILY_RECORD_DETAIL,\r\n//         payload: editRecord\r\n//     }\r\n// }\r\n// export function SetDailyRecords(dailyRecords: IDailyRecord[]): DailyRecordActionTypes {\r\n//     return {\r\n//         type: SET_DAILY_RECORD,\r\n//         payload: dailyRecords\r\n//     }\r\n// }","import React from 'react';\r\nimport { Modal, Input, TimePicker, Form } from 'antd'\r\nimport { IDailyRecordDetail } from '../../redux/store/dailyRecord/types';\r\nexport type IinitialValues = {\r\n    recordDetailUUID: string,\r\n    recordTitle: string,\r\n    recordDescription: string,\r\n    taikingTime: [Date, Date]\r\n}\r\ninterface IRecordDetailModal {\r\n    modalTitle: string,\r\n    recordUUID: string,\r\n    visible: boolean,\r\n    initialValues?: IinitialValues,\r\n    onOk: (record: IDailyRecordDetail) => void,\r\n    handleCancel: () => void\r\n}\r\nconst ModifyRecordDetailModal = ({ modalTitle, recordUUID, visible, initialValues, onOk, handleCancel }: IRecordDetailModal) => {\r\n    const { TextArea } = Input;\r\n    const { RangePicker } = TimePicker;\r\n    const [form] = Form.useForm();\r\n    const format = 'HH:mm';\r\n    return (\r\n        <Modal\r\n            title={modalTitle}\r\n            visible={visible}\r\n            onOk={() => {\r\n                form\r\n                    .validateFields()\r\n                    .then(values => {\r\n                        console.log(values);\r\n                        const title = values.recordTitle;\r\n                        const description = values.recordDescription;\r\n                        const [startTime, endTime] = values.taikingTime;\r\n                        const record: IDailyRecordDetail = {\r\n                            recordUUID: recordUUID,\r\n                            recordDetailUUID: initialValues !== undefined ? initialValues.recordDetailUUID : '',\r\n                            projectUUID: null,\r\n                            title: title,\r\n                            description: description,\r\n                            startTime: startTime,\r\n                            endTime: endTime,\r\n                            createTime: new Date(),\r\n                        }\r\n                        onOk(record);\r\n                        form.resetFields();\r\n                    })\r\n\r\n            }}\r\n            onCancel={handleCancel}\r\n        >\r\n            <Form form={form} layout='vertical' initialValues={initialValues}>\r\n                <Form.Item name='recordTitle' label='Record Title' rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name='recordDescription' label='Record Description' rules={[{ required: true }]}>\r\n                    <TextArea ></TextArea>\r\n                </Form.Item>\r\n                <Form.Item name='taikingTime' label='Taking Time' rules={[{ required: true }]}>\r\n                    <RangePicker picker='time' format={format} />\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n    )\r\n}\r\nexport default ModifyRecordDetailModal;","import React, { useState } from 'react';\r\nimport { editRecordDetail as editDetail } from '../../redux/store/dailyRecord/actions'\r\nimport { useDispatch } from 'react-redux';\r\nimport { EditOutlined } from '@ant-design/icons';\r\nimport ModifyRecordDetailModal, { IinitialValues } from './modifyRecordDetailModal';\r\nimport { IDailyRecordDetail } from '../../redux/store/dailyRecord/types';\r\n\r\ntype PropsFromParent = {\r\n    record: IDailyRecordDetail\r\n};\r\ntype Props = PropsFromParent\r\n\r\nconst EditDailyRecordDetail = (props: Props) => {\r\n    const [visible, setVisible] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const openModal = () => setVisible(true);\r\n    const initialValues: IinitialValues = {\r\n        recordDetailUUID: props.record.recordDetailUUID,\r\n        recordTitle: props.record.title,\r\n        recordDescription: props.record.description,\r\n        taikingTime: [props.record.startTime, props.record.endTime]\r\n    }\r\n    return (\r\n        <div className='mr-1'>\r\n            <a onClick={openModal}><EditOutlined /></a>\r\n            <ModifyRecordDetailModal\r\n                modalTitle='Edit Record'\r\n                recordUUID={props.record.recordUUID}\r\n                initialValues={initialValues}\r\n                visible={visible}\r\n                onOk={(values) => {\r\n                    dispatch(editDetail(values));\r\n                    setVisible(false);\r\n                }}\r\n                handleCancel={() => setVisible(false)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditDailyRecordDetail;","import React from 'react';\r\nimport { Button, Popconfirm } from 'antd';\r\nimport { deleteRecordDetail } from '../../redux/store/dailyRecord/actions'\r\nimport { connect, ConnectedProps, useDispatch } from 'react-redux';\r\nimport { IDailyRecordDetail } from '../../redux/store/dailyRecord/types';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\n\r\ntype PropsFromParent = {\r\n    record: IDailyRecordDetail\r\n}\r\ntype Props = PropsFromParent\r\n\r\nconst DeleteDailyRecordDetail = (props: Props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteRecord = () => {\r\n        dispatch(\r\n            deleteRecordDetail({\r\n                recordUUID: props.record.recordUUID,\r\n                recordDetailUUID: props.record.recordDetailUUID\r\n            })\r\n        );\r\n    };\r\n    return (\r\n        <div>\r\n            <Popconfirm placement='right' title='確認刪除嗎?' onConfirm={deleteRecord} okText=\"Yes\" cancelText=\"No\">\r\n                <a><DeleteOutlined /></a>\r\n            </Popconfirm>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeleteDailyRecordDetail;","import React from \"react\";\r\nimport { IDailyRecordDetail } from \"../../redux/store/dailyRecord/types\";\r\nimport EditDailyRecordDetail from './editDailyRecordDetail'\r\nimport DeleteDailyRecordDetail from './deleteDailyRecordDetail'\r\nimport { Row, Col, Card } from \"antd\";\r\nimport moment from \"moment\";\r\n\r\ninterface IRecordItem {\r\n    recordItem: IDailyRecordDetail,\r\n}\r\n\r\nconst DailyRecordDetail = (props: IRecordItem) => {\r\n    const { recordItem } = props;\r\n    const format = 'HH:mm';\r\n    return (\r\n        <div>\r\n            <Card\r\n                size=\"small\"\r\n                title={recordItem.title}\r\n                extra={\r\n                    <div className='flex'>\r\n                        <EditDailyRecordDetail record={recordItem}></EditDailyRecordDetail>\r\n                        <DeleteDailyRecordDetail record={recordItem}></DeleteDailyRecordDetail>\r\n                    </div>\r\n                }\r\n                actions={[<div>{moment(recordItem.startTime).format(format)} - {moment(recordItem.endTime).format(format)}</div>]}\r\n            >\r\n                {recordItem.description}\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DailyRecordDetail;","import React, { useState } from 'react';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport ModifyRecordDetailModal from './modifyRecordDetailModal';\r\nimport { useDispatch } from 'react-redux'\r\nimport { addRecordDetail as addDetail } from '../../redux/store/dailyRecord/actions'\r\n\r\ntype PropsFromParent = {\r\n    recordUUID: string\r\n};\r\ntype Props = PropsFromParent\r\n\r\nconst AddDailyRecordDetail = (props: Props) => {\r\n    const [visible, setVisible] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const openModal = () => setVisible(true);\r\n\r\n    return (\r\n        <div className='flex'>\r\n            <a className=' text-lg' onClick={openModal}><PlusOutlined /></a>\r\n            <ModifyRecordDetailModal\r\n                modalTitle='New Record'\r\n                recordUUID={props.recordUUID}\r\n                visible={visible}\r\n                onOk={(values) => {\r\n                    dispatch(addDetail(values));\r\n                    setVisible(false);\r\n                }}\r\n                handleCancel={() => setVisible(false)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddDailyRecordDetail;","import React, { useState } from 'react'\r\nimport DailyRecordDetail from './dailyRecordDetail';\r\nimport moment from 'moment';\r\nimport { sort } from 'ramda';\r\nimport AddDailyRecordDetail from './addDailyRecordDetail'\r\nimport { IDailyRecord, IDailyRecordDetail } from '../../redux/store/dailyRecord/types';\r\n\r\ninterface IWorkingRecord {\r\n    workingRecord: IDailyRecord\r\n}\r\nconst DailyRecord = (props: IWorkingRecord) => {\r\n    const record = props.workingRecord;\r\n    const timeDiff = (prev: IDailyRecordDetail, next: IDailyRecordDetail) => prev.startTime.valueOf() - next.startTime.valueOf();\r\n    const { recordItems } = props.workingRecord;\r\n    return (\r\n        <div className='border flex-1 m-1'>\r\n            <div className='flex text-center border-b'>\r\n                <div className=' flex-grow flex-shrink'>\r\n                    {moment(record.date).format('MM/DD(ddd)')}\r\n                </div>\r\n                <div className='flex-shrink-0 flex-grow-0'>\r\n                    <AddDailyRecordDetail recordUUID={props.workingRecord.recordUUID} ></AddDailyRecordDetail>\r\n                </div>\r\n            </div>\r\n\r\n            {sort(timeDiff, recordItems).map((item) => <DailyRecordDetail key={item.recordDetailUUID} recordItem={item} ></DailyRecordDetail>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DailyRecord;","import React, { useState, useEffect } from 'react'\r\nimport DailyRecord from './dailyRecord';\r\nimport { RootState } from '../../redux/store';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { LeftCircleOutlined, RightCircleOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport { getRecords } from '../../redux/store/dailyRecord/actions'\r\n\r\nconst WeeklyRecord = () => {\r\n    const records = useSelector((state: RootState) => state.dailyRecord.dailyRecords);\r\n    const dispatch = useDispatch();\r\n    const [dateRange, setDateRange] = useState({\r\n        startDate: moment().startOf('week').toDate(),\r\n        endDate: moment().endOf('week').toDate()\r\n    })\r\n    useEffect(() => {\r\n        dispatch(getRecords(dateRange));\r\n    }, [dateRange]);\r\n    const goPrevWeek = () => {\r\n        setDateRange({\r\n            startDate: moment(dateRange.startDate).subtract(7, 'd').toDate(),\r\n            endDate: moment(dateRange.endDate).subtract(7, 'd').toDate()\r\n        });\r\n    }\r\n    const goNextWeek = () => {\r\n        setDateRange({\r\n            startDate: moment(dateRange.startDate).add(7, 'd').toDate(),\r\n            endDate: moment(dateRange.endDate).add(7, 'd').toDate()\r\n        });\r\n    }\r\n    return (\r\n        <div>\r\n            <div className='flex container mx-auto'>\r\n                <div><a onClick={goPrevWeek}><LeftCircleOutlined className='text-4xl' /></a></div>\r\n                <div className='flex-1 text-center text-4xl'>{moment(dateRange.startDate).format('MM/DD')} - {moment(dateRange.endDate).format('MM/DD')}</div>\r\n                <div><a onClick={goNextWeek}><RightCircleOutlined className='text-4xl' /></a></div>\r\n            </div>\r\n            <div className='flex container mx-auto'>\r\n                {\r\n                    records.map((record, index) => {\r\n                        return (\r\n                            <DailyRecord key={record.recordUUID} workingRecord={record}></DailyRecord>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeeklyRecord;","import React from 'react'\r\nimport WeeklyRecord from './weeklyRecord'\r\n\r\nconst DailyRecordPage = () => {\r\n    return (\r\n        <div>\r\n            <WeeklyRecord></WeeklyRecord>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DailyRecordPage;","import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Input, Row, Col } from 'antd';\r\n//TODO 精度問題，如果中途按暫停之後目前的寫法會導致秒數還是會被多扣 1\r\nconst PomodoroTimer = () => {\r\n    const [form] = Form.useForm();\r\n    const initialValues = {\r\n        workingInterval: 25,\r\n        restInterval: 5\r\n    }\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isWorkingTime, setIsWorkingTime] = useState(false);\r\n    const [isRestTime, setIsRestTime] = useState(false);\r\n    const [workingSeconds, setWorkingSeconds] = useState(0);\r\n    const [restSeconds, setRestSeconds] = useState(0);\r\n    const [workingInterval, setWorkingInterval] = useState(initialValues.workingInterval);\r\n    const [restInterval, setRestInterval] = useState(initialValues.restInterval);\r\n    useEffect(() => {\r\n        let timer = window.setTimeout(() => {\r\n            if (isActive && isWorkingTime) {\r\n                if (workingSeconds > workingInterval * 60) {\r\n                    new Notification('Resting Time!');\r\n                    console.log('Time to rest');\r\n                    setIsRestTime(true);\r\n                    setIsWorkingTime(false);\r\n                    setWorkingSeconds(0);\r\n                    return;\r\n                }\r\n                setWorkingSeconds((seconds) => seconds + 1);\r\n                console.log(workingSeconds)\r\n            }\r\n        }, 1000)\r\n        return () => window.clearTimeout(timer);\r\n    }, [isActive, isWorkingTime, workingSeconds])\r\n    useEffect(() => {\r\n        let timer = window.setTimeout(() => {\r\n            if (isActive && isRestTime) {\r\n                if (restSeconds > restInterval * 60) {\r\n                    new Notification('Working Time!');\r\n                    console.log('Time to work');\r\n                    setIsRestTime(false);\r\n                    setIsWorkingTime(true);\r\n                    setRestSeconds(0);\r\n                    return;\r\n                }\r\n                setRestSeconds((seconds) => seconds + 1);\r\n                console.log(restSeconds)\r\n            }\r\n        }, 1000)\r\n        return () => window.clearTimeout(timer);\r\n    }, [isActive, isRestTime, restSeconds])\r\n    const startTimer = ()=>{\r\n        form\r\n            .validateFields()\r\n            .then(fields => {\r\n                setWorkingInterval(fields.workingInterval);\r\n                setRestInterval(fields.restInterval);\r\n                setIsWorkingTime(true);\r\n                setIsActive(true);\r\n            });\r\n    }\r\n    const onStartTimer = () => {\r\n        if (Notification && Notification.permission !== \"granted\") {\r\n            Notification.requestPermission()\r\n                .then((permission) => {\r\n                    if (permission !== 'granted') {\r\n                        alert('請同意網頁通知番茄鐘提醒');\r\n                        return;\r\n                    }\r\n                    startTimer();\r\n                });\r\n                return;\r\n        }\r\n        startTimer();\r\n\r\n    }\r\n    const onStopTimer = () => {\r\n        setIsWorkingTime(false);\r\n        setIsRestTime(false);\r\n        setIsActive(false);\r\n        setWorkingSeconds(0);\r\n        setRestSeconds(0);\r\n    }\r\n    return (\r\n        <div>\r\n            <Form form={form} initialValues={initialValues}>\r\n                <Input.Group>\r\n                    <Row>\r\n                        每<Col>\r\n                            <Form.Item noStyle name='workingInterval' rules={[{ required: true }]}>\r\n                                <Input />\r\n                            </Form.Item>\r\n                        </Col>\r\n                            分鐘提醒，並休息\r\n                            <Col>\r\n                            <Form.Item noStyle name='restInterval' rules={[{ required: true }]}>\r\n                                <Input />\r\n                            </Form.Item>\r\n                        </Col>\r\n                            分鐘\r\n                    </Row>\r\n                </Input.Group>\r\n            </Form>\r\n            <Button onClick={onStartTimer}>Start</Button><Button onClick={onStopTimer}>Stop</Button>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default PomodoroTimer;","import { createAction } from '@reduxjs/toolkit'\r\nimport { IProjectInfo, IDeleteIProjectInfo } from './types';\r\n\r\nexport const addProject = createAction<IProjectInfo>('ADD_PROJECT');\r\nexport const deleteProject = createAction<IDeleteIProjectInfo>('DELETE_PROJECT');\r\nexport const editProject = createAction<IProjectInfo>('EDIT_PROJECT'); ","import React from 'react'\r\nimport { DeleteOutlined } from '@ant-design/icons'\r\nimport { deleteProject } from '../../redux/store/projectScheduler/actions';\r\nimport { connect, ConnectedProps, useDispatch } from 'react-redux';\r\n\r\ntype PropsFromParent = {\r\n    projectUUID: string\r\n};\r\ntype Props = PropsFromParent\r\nconst DeleteProject = (props: Props) => {\r\n    const dispatch = useDispatch();\r\n    const onClickDelete = () => dispatch(deleteProject({ projectUUID }));\r\n    const { projectUUID } = props;\r\n    return (\r\n        <a onClick={onClickDelete} className='text-xl'>\r\n            <DeleteOutlined />\r\n        </a>\r\n    )\r\n}\r\n\r\nexport default DeleteProject;\r\n","import React from 'react'\r\nimport { RootState } from '../../redux/store'\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { List } from 'antd';\r\nimport { EditOutlined, DeleteOutlined, PlusOutlined, InfoCircleOutlined } from '@ant-design/icons';\r\nimport { useRouteMatch, Link } from 'react-router-dom';\r\nimport DeleteProject from './deleteProject';\r\nconst mapState = (state: RootState) => {\r\n    return {\r\n        projectList: state.projectScheduler\r\n    }\r\n}\r\nconst connector = connect(mapState);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux\r\nconst ProjectList = (props: Props) => {\r\n    const projectList = props.projectList;\r\n\r\n    const { path, url } = useRouteMatch();\r\n    return (\r\n        <div className=\"container mx-auto\">\r\n            <List\r\n                header={\r\n                    <div className='flex'>\r\n                        <div className='flex-shrink flex-grow'>Project List</div>\r\n                        <div className='flex-grow-0 flex-shrink-0'>\r\n                            <Link to={`${url}/add`} className='text-xl'><PlusOutlined /></Link>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                bordered\r\n                dataSource={projectList}\r\n                renderItem={item => (\r\n                    <List.Item actions={[\r\n                        <InfoCircleOutlined />,\r\n                        <Link className='text-xl' to={`${url}/edit/${item.projectUUID}`} key=\"list-loadmore-edit\"><EditOutlined /></Link>,\r\n                        <DeleteProject projectUUID={item.projectUUID === null ? '' : item.projectUUID}></DeleteProject>\r\n                    ]}>\r\n                        <List.Item.Meta\r\n                            title={<div>{item.name}</div>}\r\n                            description={item.name}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connector(ProjectList);","import React from 'react'\r\nimport ModifyProjectInfo from './modifyProjectInfo';\r\nimport Calendar from './calendar';\r\nimport ProjectList from './projectList';\r\n\r\n\r\nconst ProjectScheduler = () => {\r\n\r\n    return (\r\n        <div className='flex'>\r\n            {/* <ModifyProjectInfo saveSetting={(projectInfo) => { }}></ModifyProjectInfo> */}\r\n            <ProjectList></ProjectList>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectScheduler;","import React from 'react'\r\nimport { Row, Col, Form, Input, DatePicker, Button } from 'antd'\r\nimport { PlusOutlined, MinusCircleOutlined } from '@ant-design/icons';\r\nimport { IProjectInfo } from '../../redux/store/projectScheduler/types';\r\n\r\nconst SubTask = ({ id }: { id: number }) => {\r\n    const { RangePicker } = DatePicker;\r\n    return (\r\n        <Form.List name={[id, 'subtask']}>\r\n            {(fields, { add, remove }) => {\r\n                return (\r\n                    <div>\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"dashed\"\r\n                                onClick={() => {\r\n                                    add();\r\n                                }}\r\n                                style={{ width: '60%' }}\r\n                            >\r\n                                <PlusOutlined /> Add SubTask\r\n                            </Button>\r\n                        </Form.Item>\r\n                        {fields.map((field, index) => (\r\n                            <div key={field.key} className='flex'>\r\n                                <Form.Item\r\n                                    name={[field.name, 'title']}\r\n                                    validateTrigger={['onChange', 'onBlur']}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            whitespace: true,\r\n                                            message: \"Please input Subtask title\",\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input placeholder=\"Subtask title\" />\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name={[field.name, 'member']}\r\n                                    validateTrigger={['onChange', 'onBlur']}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            whitespace: true,\r\n                                            message: \"Please input task member\",\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input placeholder=\"Task member\" />\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name={[field.name, 'dateRange']}\r\n                                >\r\n                                    <RangePicker picker='week' placeholder={[\"Task start week\", \"Task finish week\"]} />\r\n                                </Form.Item>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )\r\n            }}\r\n        </Form.List>\r\n    )\r\n}\r\nconst Task = () => {\r\n    const { RangePicker } = DatePicker;\r\n    return (\r\n        <Form.List name=\"task\">\r\n            {(fields, { add, remove }) => {\r\n                return (\r\n                    <div>\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"dashed\"\r\n                                onClick={() => {\r\n                                    add();\r\n                                }}\r\n                                style={{ width: '60%' }}\r\n                            >\r\n                                <PlusOutlined /> Add Task\r\n                            </Button>\r\n                        </Form.Item>\r\n                        {fields.map((field, index) => (\r\n                            <div key={field.key}>\r\n                                <div className='flex'>\r\n                                    <Form.Item\r\n                                        name={[field.name, 'title']}\r\n                                        validateTrigger={['onChange', 'onBlur']}\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                whitespace: true,\r\n                                                message: \"Please input task title\",\r\n                                            },\r\n                                        ]}\r\n\r\n                                    >\r\n                                        <Input placeholder=\"Task title\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name={[field.name, 'description']}\r\n                                        validateTrigger={['onChange', 'onBlur']}\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                whitespace: true,\r\n                                                message: \"Please input task description\",\r\n                                            },\r\n                                        ]}\r\n                                    >\r\n                                        <Input placeholder=\"Task description\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name={[field.name, 'member']}\r\n                                        validateTrigger={['onChange', 'onBlur']}\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                whitespace: true,\r\n                                                message: \"Please input task member\",\r\n                                            },\r\n                                        ]}\r\n                                    >\r\n                                        <Input placeholder=\"Task member\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name={[field.name, 'dateRange']}\r\n                                    >\r\n                                        <RangePicker picker='week' placeholder={[\"Task start week\", \"Task finish week\"]} />\r\n                                    </Form.Item>\r\n                                    <MinusCircleOutlined\r\n                                        className=\"dynamic-delete-button\"\r\n                                        style={{ margin: '0 8px' }}\r\n                                        onClick={() => {\r\n                                            remove(field.name);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <SubTask id={field.name}></SubTask>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                );\r\n            }}\r\n        </Form.List>\r\n    )\r\n}\r\n\r\nconst ModifyProjectInfo = ({ saveSetting, initialValues }: { saveSetting: (projectSetting: IProjectInfo) => void, initialValues?: IProjectInfo }) => {\r\n    const { RangePicker } = DatePicker;\r\n    const [form] = Form.useForm();\r\n\r\n    const saveProjectSettings = () => {\r\n        form\r\n            .validateFields()\r\n            .then(values => {\r\n                const setting: IProjectInfo = {\r\n                    projectUUID: initialValues ? initialValues.projectUUID : null,\r\n                    name: values.projectName,\r\n                    description: values.description,\r\n                    members: [],\r\n                    startDate: values.totalDateRange[0],\r\n                    closeDate: values.totalDateRange[1],\r\n                    task: values.task,\r\n                }\r\n                saveSetting(setting);\r\n                console.log(JSON.stringify( values));\r\n            })\r\n            .catch(reason => {\r\n                console.log(reason);\r\n            })\r\n    }\r\n    return (\r\n        <div>\r\n            <Form form={form}\r\n                initialValues={initialValues}>\r\n                <Form.Item name='projectName' label='Project Name'\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            whitespace: true,\r\n                            message: \"Please input project name\",\r\n                        },\r\n                    ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name='description' label='Description'>\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <Form.Item name='member' label='Member'\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            whitespace: true,\r\n                            message: \"Please input member\",\r\n                        },\r\n                    ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name='totalDateRange' label='Total Date Range'\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Please input project duration\",\r\n                        },\r\n                    ]}>\r\n                    <RangePicker picker='week' />\r\n                </Form.Item>\r\n                <Task></Task>\r\n                <Button onClick={saveProjectSettings}>Save</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModifyProjectInfo;","import React from 'react'\r\nimport ModifyProjectInfo from './modifyProjectInfo'\r\nimport { useDispatch } from 'react-redux';\r\nimport { addProject } from '../../redux/store/projectScheduler/actions';\r\nimport { IProjectInfo } from '../../redux/store/projectScheduler/types';\r\n\r\nconst AddProject = () => {\r\n    const dispatch = useDispatch();\r\n    const saveSetting = (setting: IProjectInfo) => {\r\n        dispatch(addProject(setting));\r\n    }\r\n    return (\r\n        <div>\r\n            <div className='flex container mx-auto'>\r\n                <ModifyProjectInfo saveSetting={saveSetting}></ModifyProjectInfo>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddProject;","import React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst EditProject = () => {\r\n    const { projectUUID } = useParams();\r\n    console.log(projectUUID);\r\n    return (\r\n        <div></div>\r\n    )\r\n}\r\n\r\nexport default EditProject;","import React, { useState } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom'\nimport logo from './logo.svg';\nimport UserPage from '../src/pages/User'\nimport './App.css';\nimport DailyRecordPage from './pages/DailyRecord';\nimport PomodoroTimer from './pages/PomodoroTimer';\nimport ProjectScheduler from './pages/ProjectScheduler';\nimport { Menu } from 'antd';\nimport AddProject from './pages/ProjectScheduler/addProject';\nimport EditProject from './pages/ProjectScheduler/editProject';\n\n\n\nfunction App() {\n  const user = {\n    name: 'GoHmoe'\n  }\n  const [currentPage, setCurrentPage] = useState('');\n  return (\n    <div>\n      <header className='text-xl max-w-full shadow'>\n        <div className='h-16 flex'>\n          <div className='flex items-center'>\n            <div className='ml-4 mr-4 pr-4 border-r-2'><a href='/'>Project Planing Now</a></div>\n            <Menu onClick={(e) => { setCurrentPage(e.key) }} selectedKeys={[currentPage]} mode=\"horizontal\">\n              <Menu.Item key=\"WorkingRecord\">\n                <Link className='' to='/WorkingRecord'>WorkingRecord</Link>\n              </Menu.Item>\n              <Menu.Item key=\"PomodoroTimer\">\n                <Link className='' to='/PomodoroTimer'>PomodoroTimer</Link>\n              </Menu.Item>\n              <Menu.Item key=\"ProjectScheduler\">\n                <Link className='' to='/ProjectScheduler'>ProjectScheduler</Link>\n              </Menu.Item>\n            </Menu>\n          </div>\n        </div>\n      </header>\n      <div className=' pt-10'>\n        <Switch>\n          <Route exact path='/user' render={() => <UserPage user={user}></UserPage>} />\n          <Route exact path='/WorkingRecord' render={() => <DailyRecordPage></DailyRecordPage>} />\n          <Route exact path='/PomodoroTimer' render={() => <PomodoroTimer></PomodoroTimer>} />\n          <Route exact path='/ProjectScheduler' render={() => <ProjectScheduler></ProjectScheduler>} />\n          <Route exact path='/ProjectScheduler/add' render={() => <AddProject></AddProject>}></Route>\n          <Route exact path='/ProjectScheduler/edit/:projectUUID' render={() => <EditProject></EditProject>}></Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import moment from \"moment\";\r\n// import {\r\n//     IDailyRecordState,\r\n//     DailyRecordActionTypes,\r\n//     SET_DAILY_RECORD,\r\n//     ADD_DAILY_RECORD_DETAIL,\r\n//     EDIT_DAILY_RECORD_DETAIL,\r\n//     DELETE_DAILY_RECORD_DETAIL,\r\n//     IDailyRecord\r\n// } from \"./types\";\r\nimport { IDailyRecord, IDailyRecordState } from \"./types\";\r\nimport { range, clone } from \"ramda\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addRecordDetail, editRecordDetail, deleteRecordDetail, getRecords } from \"./actions\";\r\n\r\nconst initialState: IDailyRecordState = {\r\n    dailyRecords: []\r\n}\r\n\r\nexport const dailyRecordReducer = createReducer(initialState, builder =>\r\n    builder\r\n        .addCase(getRecords, (state, action) => {\r\n            const dayDurantion = moment(action.payload.endDate).diff(action.payload.startDate, 'd') + 1;\r\n            const weekDay = range(0, dayDurantion).map((day) => moment(action.payload.startDate).day(day));\r\n            state.dailyRecords = weekDay.map((day): IDailyRecord => {\r\n                return {\r\n                    recordUUID: uuidv4(),\r\n                    date: day.toDate(),\r\n                    recordItems: []\r\n                }\r\n            })\r\n        })\r\n        .addCase(addRecordDetail, (state, action) => {\r\n            const beAddRecord = state\r\n                .dailyRecords\r\n                .find(dailyRecord => dailyRecord.recordUUID === action.payload.recordUUID);\r\n            if (beAddRecord !== undefined) {\r\n                const addingRecordItem = clone(action.payload);\r\n                addingRecordItem.recordDetailUUID = uuidv4();\r\n                beAddRecord.recordItems.push(addingRecordItem);\r\n            }\r\n\r\n            // const newDailyRecords = state.dailyRecords.map((dailyRecord) => {\r\n            //     if (dailyRecord.recordUUID === action.payload.recordUUID) {\r\n            //         return {\r\n            //             ...dailyRecord,\r\n            //             recordItems: dailyRecord.recordItems.concat(action.payload)\r\n            //         }\r\n            //     }\r\n            //     return dailyRecord;\r\n            // })\r\n            // return {\r\n            //     ...state,\r\n            //     dailyRecords: newDailyRecords\r\n            // }\r\n        })\r\n        .addCase(editRecordDetail, (state, action) => {\r\n            let beEditRecord = state\r\n                .dailyRecords\r\n                .find(dailyRecord => dailyRecord.recordUUID === action.payload.recordUUID);\r\n            if (beEditRecord !== undefined) {\r\n                const beEditRecordDetailIndex = beEditRecord.recordItems.findIndex(x => x.recordDetailUUID === action.payload.recordDetailUUID)\r\n                beEditRecord.recordItems.splice(beEditRecordDetailIndex, 1, action.payload);\r\n            }\r\n            // const newDailyRecords = state.dailyRecords.map((dailyRecord) => {\r\n            //     if (dailyRecord.recordUUID === action.payload.recordUUID) {\r\n            //         return {\r\n            //             ...dailyRecord,\r\n            //             recordItems: dailyRecord.recordItems\r\n            //                 .filter((item) => item.recordDetailUUID !== action.payload.recordDetailUUID)\r\n            //                 .concat(action.payload)\r\n            //         }\r\n            //     }\r\n            //     return dailyRecord;\r\n            // })\r\n            // return {\r\n            //     ...state,\r\n            //     dailyRecords: newDailyRecords\r\n            // }\r\n        })\r\n        .addCase(deleteRecordDetail, (state, action) => {\r\n\r\n            const beEditRecord = state\r\n                .dailyRecords\r\n                .find(dailyRecord => dailyRecord.recordUUID === action.payload.recordUUID);\r\n            if (beEditRecord !== undefined) {\r\n                const beDeleteRecordDetailIndex = beEditRecord.recordItems.findIndex(x => x.recordDetailUUID === action.payload.recordDetailUUID)\r\n                beEditRecord.recordItems.splice(beDeleteRecordDetailIndex, 1);\r\n            }\r\n\r\n\r\n            // const newDailyRecords = state.dailyRecords.map((dailyRecord) => {\r\n            //     if (dailyRecord.recordUUID === action.payload.recordUUID) {\r\n            //         return {\r\n            //             ...dailyRecord,\r\n            //             recordItems: dailyRecord.recordItems\r\n            //                 .filter((item) => item.recordDetailUUID !== action.payload.recordDetailUUID)\r\n            //         }\r\n            //     }\r\n            //     return dailyRecord;\r\n            // })\r\n            // return {\r\n            //     ...state,\r\n            //     dailyRecords: newDailyRecords\r\n            // }\r\n        })\r\n)\r\n\r\n// export function dailyRecordReducer(state = initialState, action: DailyRecordActionTypes) {\r\n//     switch (action.type) {\r\n//         case SET_DAILY_RECORD: {\r\n//             return {\r\n//                 dailyRecords: action.payload\r\n//             };\r\n//         }\r\n//         case ADD_DAILY_RECORD_DETAIL: {\r\n//             const newDailyRecords = state.dailyRecords.map((dailyRecord) => {\r\n//                 if (dailyRecord.recordUUID === action.payload.recordUUID) {\r\n//                     return {\r\n//                         ...dailyRecord,\r\n//                         recordItems: dailyRecord.recordItems.concat(action.payload)\r\n//                     }\r\n//                 }\r\n//                 return dailyRecord;\r\n//             })\r\n//             return {\r\n//                 ...state,\r\n//                 dailyRecords: newDailyRecords\r\n//             }\r\n//         }\r\n//         case EDIT_DAILY_RECORD_DETAIL: {\r\n//             const newDailyRecords = state.dailyRecords.map((dailyRecord) => {\r\n//                 if (dailyRecord.recordUUID === action.payload.recordUUID) {\r\n//                     return {\r\n//                         ...dailyRecord,\r\n//                         recordItems: dailyRecord.recordItems\r\n//                             .filter((item) => item.recordDetailUUID !== action.payload.recordDetailUUID)\r\n//                             .concat(action.payload)\r\n//                     }\r\n//                 }\r\n//                 return dailyRecord;\r\n//             })\r\n//             return {\r\n//                 ...state,\r\n//                 dailyRecords: newDailyRecords\r\n//             }\r\n//         }\r\n//         case DELETE_DAILY_RECORD_DETAIL: {\r\n//             const newDailyRecords = state.dailyRecords.map((dailyRecord) => {\r\n//                 if (dailyRecord.recordUUID === action.payload.recordUUID) {\r\n//                     return {\r\n//                         ...dailyRecord,\r\n//                         recordItems: dailyRecord.recordItems\r\n//                             .filter((item) => item.recordDetailUUID !== action.payload.recordDetailUUID)\r\n//                     }\r\n//                 }\r\n//                 return dailyRecord;\r\n//             })\r\n//             return {\r\n//                 ...state,\r\n//                 dailyRecords: newDailyRecords\r\n//             }\r\n//         }\r\n//         default: {\r\n//             return state;\r\n//         }\r\n//     }\r\n// }","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { IProjectInfo } from \"./types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { addProject, editProject, deleteProject } from \"./actions\";\r\nimport { clone } from 'ramda';\r\nconst initialState: IProjectInfo[] = [];\r\n\r\nexport const projectSchedulerReducer = createReducer(initialState, builder =>\r\n    builder\r\n        .addCase(addProject, (state, action) => {\r\n            const beAddedProject = clone(action.payload);\r\n            beAddedProject.projectUUID = uuidv4();\r\n            state.push(beAddedProject);\r\n        })\r\n        .addCase(editProject, (state, action) => {\r\n            const beEditedProjectIndex = state.findIndex(x => x.projectUUID === action.payload.projectUUID);\r\n            if (beEditedProjectIndex !== -1) {\r\n                state.splice(beEditedProjectIndex, 1, action.payload);\r\n            }\r\n        })\r\n        .addCase(deleteProject, (state, action) => {\r\n            return state.filter(project => {\r\n                return project.projectUUID !== action.payload.projectUUID\r\n            });\r\n        })\r\n)","import { combineReducers } from 'redux'\r\nimport { dailyRecordReducer } from './dailyRecord/reducers'\r\nimport { projectSchedulerReducer } from './projectScheduler/reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n    dailyRecord: dailyRecordReducer,\r\n    projectScheduler: projectSchedulerReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;","import { createStore } from 'redux'\r\nimport { configureStore } from '@reduxjs/toolkit'\r\nimport rootReducer from './store/index'\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer\r\n})\r\n\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './assets/main.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/rootStore'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}